#+property: header-args:R :session *R* :exports both :results code output :eval no-export 

* stdbscan package.
ST-DBSCAN (density-based clustering applicable Spatio-Temporal data.) [fn:1]は密度ベースのクラスタリング手法であり、時空間データの解像度はそのままにクラスタリングを行い、ホットスポット検出など時空間データの解析に広く利用されている手法です。

* ST-DBSCANのアルゴリズム

ST-SBSCAN法のアルゴリズム[fn:1]は引用文献から引用し、 ~stdbscan~ 関数を定義しました。
また、このパッケージではグリッドデータにも対応できるよう、アルゴリズムを一部修正しています。
具体的には、クラスター認定されるためには地点 $X$ の隣接点 $Y$ の数が MinPts以上であることが条件 ( $|Y| \geqq MinPts$ ) となっていますが、グリッドデータは常に一定数の隣接点を持つことからこの条件では最適な隣接点を求めることができないと思われます。
そこで、 地点 $X$ と隣接点 $Y$ の値 $D$ の差が $\Delta \epsilon$ 以上となる条件 $Y_\epsilon = (X - Y) \geqq \Delta \epsilon$ の数が MinPts 以上となる条件 ( $|Y_\epsilon| \geqq minPts$ )に変更してクラスター判定を行うよう修正しました。

更に、ST-DBSCAN法の結果に階層的クラスタリングを適用する、階層的ST-DBSCAN (Hierarchical ST-DBSCAN) を実行する ~hstdbscan~ 関数を定義しました。
この ~hstdbscan~ は ~neighbortype = "spatial"~ であるデータに対して、効果的に階層的クラスタリングを実施できます。(~neighbortype = "random"~ では実施しても意味がありません。)

* install package
githubからインストールを実行してください。

#+begin_src R 
  devtools::install_github("IEOHS/ST-DBSCAN.R")
#+end_src


* usage
** ST-DBSCAN
*** for random data

地震の観測位置のように、位置、時間がランダムで位置情報の重複を考慮しないデータである場合、以下のようにして計算を実行します。

#+begin_src R
  library(stdbscan)
  x <- seq(130, 140, by = 1)
  y <- seq(30, 40, by = 1)
  t <- as.POSIXct("2024-01-01 00:00:00", tz = "JST") + 3600 * seq(0, 23, by = 6)
  geo <- sf::st_as_sf(expand.grid(x, y), coords = c("Var1", "Var2"), crs = 4326)

  ## for ramdom
  D <- abs(runif(nrow(geo))) * 100
  clust <- stdbscan(x = cbind(geo, time = rep(t, nrow(geo))[1:nrow(geo)]),
                    eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = D,
                                     delta_eps = 20)),
                    metric = "geo", neighbortype = "random", dbscantype = "default")
  print(clust)
#+end_src

#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 09:51:36 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6

Fri Jun 20 09:51:36 2025  Completed.

Completed.
ST-DBSCAN clustering for 121 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = random, ST-DBSCAN type = random
The clustering contains 6 cluster(s) and 69 noise points.
D (Δeps): 
   Obs_1 (20)
#+end_src

*** for spatial data
気象観測データ、シミュレーション等の格子モデルの結果など、位置情報が時間で変化しないデータを利用する場合、以下のように実行します。

#+begin_src R
  D <- abs(runif(nrow(geo) * length(t))) * 100
  clust <- stdbscan(x = geo, time = t, eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = D,
                                     delta_eps = 20)),
                    metric = "geo", neighbortype = "spatial", dbscantype = "grid")
  print(clust)
#+end_src

#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 09:57:56 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5

Fri Jun 20 09:57:57 2025  Completed.

Completed.
ST-DBSCAN clustering for 484 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = spatial, ST-DBSCAN type = grid
The clustering contains 5 cluster(s) and 31 noise points.
D (Δeps): 
   Obs_1 (20)
#+end_src

*** plot

~stdbscan~ 関数の結果オブジェクトを ~plot~ すると、クラスターラベルで色分けされた結果を見ることができます。
#+name: code:plot-stdbscan
#+begin_src R :results file graphics :file "./inst/plot-stdbscan.png" :width 800 :height 800 :exports both :res 120
plot(clust)
#+end_src

#+name: fig:plot-stdbscan
#+attr_html: :width 500px
#+RESULTS: code:plot-stdbscan
[[file:./inst/plot-stdbscan.png]]


*** clustering for `quakes` data

Rの *quakes* データセットを使ったST-DBSCANクラスタリングをテストします。
条件として、地震の発生深さ (depth) とマグニチュード (mag) を指定しています。

#+begin_src R
  library(stdbscan)
  quakes_data <- sf::st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
  clust <- stdbscan(x = sf::st_geometry(quakes_data),
                    time = rep(1, nrow(quakes_data)),
                    eps1 = 100, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = quakes$depth,
                                     delta_eps = 150),
                                list(D = quakes$mag,
                                     delta_eps = 2)),
                    metric = "geo", neighbortype = "random", dbscantype = "default")
  print(clust)
#+end_src


#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Sun Jun 22 05:49:01 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6
	Create Cluster: 7
	Create Cluster: 8
	Create Cluster: 9
	Create Cluster: 10
	Create Cluster: 11
	Create Cluster: 12
	Create Cluster: 13
	Create Cluster: 14
	Create Cluster: 15
	Create Cluster: 16

Sun Jun 22 05:49:02 2025  Completed.

Completed.
ST-DBSCAN clustering for 1000 objects, 1 time length.
Parameters: eps1 = 100, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = random, ST-DBSCAN type = default
The clustering contains 16 cluster(s) and 28 noise points.
D (Δeps): 
   Obs_1 (150), 
   Obs_2 (2)
#+end_src

#+name: code:quakes-plot-stdbscan
#+begin_src R :results file graphics :file "./inst/quakes-plot-stdbscan.png" :width 1500 :height 400 :exports both :res 120
  with(clust$results, {
    merge(geo, value, by = "id") |> plot()
  })
#+end_src

#+name: fig:quakes-plot-stdbscan
#+attr_html: :width 1000px
#+RESULTS: code:quakes-plot-stdbscan
[[file:./inst/quakes-plot-stdbscan.png]]


** Hierarchical ST-DBSCAN

階層的クラスタリングを追加で実行する場合は、 ~hstdbscan~ 関数を利用します。

#+begin_src R
  D <- abs(runif(nrow(geo) * length(t))) * 100
  clust <- hstdbscan(x = geo, time = t, eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                     vals = list(list(D = D,
                                      delta_eps = 20)),
                     metric = "geo", neighbortype = "spatial", dbscantype = "grid")
  print(clust)
#+end_src


#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 10:01:17 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6

Fri Jun 20 10:01:17 2025  Completed.

Completed.
Hierarchical ST-DBSCAN clustering for 484 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = spatial, ST-DBSCAN type = grid
The clustering contains 6 cluster(s) and 60 noise points.
D (Δeps): 
   Obs_1 (20)


Can use the `cutclust` function to split it into `k` clusters
#+end_src

*** plot

~hstdbscan~ 関数の結果には ~hclust~ によるツリーが含まれており、以下の通り図に出力することができます。

#+name: code:plot-hstdbscan
#+begin_src R :results file graphics :file "./inst/plot-hstdbscan.png" :width 800 :height 800 :exports both :res 120
  plot(clust)
  rect_hstdbscan(clust, k = 4)
#+end_src

#+name: fig:plot-hstdbscan
#+attr_html: :width 500px
#+RESULTS: code:plot-hstdbscan
[[file:./inst/plot-hstdbscan.png]]


*** get clustering data

クラスタリングの結果を =k= 数で分割する場合、 ~cutclust~ 関数を利用して出力します。

#+begin_src R
  cutclust(clust, k = 4)
#+end_src


#+begin_src R
Simple feature collection with 121 features and 2 fields
Geometry type: POINT
Dimension:     XY
Bounding box:  xmin: 130 ymin: 30 xmax: 140 ymax: 40
Geodetic CRS:  WGS 84
First 10 features:
   cluster id       geometry
1        1  1 POINT (130 30)
2        1  2 POINT (131 30)
3        2  3 POINT (132 30)
4        2  4 POINT (133 30)
5        2  5 POINT (134 30)
6        2  6 POINT (135 30)
7        2  7 POINT (136 30)
8        3  8 POINT (137 30)
9        3  9 POINT (138 30)
10       2 10 POINT (139 30)
#+end_src

** Methods for evaluating clustering results

クラスタリングの結果を評価する方法として、シルエットスコアなどの指針値が利用されています。

一方で、時間・空間属性を持つデータのクラスタリングでは、時系列類似性と空間的集塊性が重要な意味を持つことがあります。

一対の時系列データに関する時系列類似性は、R^{2}値やRMSEなどの統計的手法で類似度を確認することができますが、3つ以上の時系列データの場合はこれらの方法をそのまま利用することはできません。
そのため、 ~stdbscan~ パッケージでは動的因子モデル (DFM) で複数の時系列データから因子を抽出し、その因子との類似性を確認することで、時系列類似性の評価を行っています (~sparseDFM~ package)。

空間的集塊性の評価には一般に ~Moran's I Statics~ が利用されています。
~Moran's I Statics~ では空間的なデータのばらつきを評価するため、空間的集塊性を定量化することができます。
~stdbscan~ パッケージでは ~Join-Count Statistics~ を利用しています (~spdep~ package)。


*** Creating Map Data with Adjacent Points

デモデータとして、2019年度の九州地方の一部 (福岡県、佐賀県、長崎県、熊本県、大分県、宮崎県、鹿児島県) の光化学オキシダント濃度データ[fn:2] と国土数値情報の地図データ[fn:3] を改変して利用しています。

#+begin_src R
  library(stdbscan)
  data("oxdata", package = "stdbscan")
  str(oxdata, 2)
#+end_src

#+RESULTS:
#+begin_src R
List of 2
 $ data: int [1:143, 1:2183] 47 50 NA 52 56 NA 49 45 47 51 ...
  ..- attr(*, "dimnames")=List of 2
 $ geo :List of 2
  ..$ gov_map    :Classes ‘sf’ and 'data.frame':	7 obs. of  2 variables:
  .. ..- attr(*, "sf_column")= chr "geometry"
  .. ..- attr(*, "agr")= Factor w/ 3 levels "constant","aggregate",..: NA
  .. .. ..- attr(*, "names")= chr "id"
  ..$ predict_map:Classes ‘sf’ and 'data.frame':	143 obs. of  4 variables:
  .. ..- attr(*, "sf_column")= chr "geometry"
  .. ..- attr(*, "agr")= Factor w/ 3 levels "constant","aggregate",..: NA NA NA
  .. .. ..- attr(*, "names")= chr [1:3] "id" "name" "pref"
#+end_src

隣接点情報を持つ地図を作成します。

#+name: code:plot-oxmap
#+begin_src R :results file graphics :file "./inst/plot-oxmap.png" :width 800 :height 800 :exports both :res 120
  oxmap <- createBufferMap(geo = sf::st_geometry(oxdata$geo$predict_map),
                           voronoi = TRUE, buffer = TRUE, dist = 18100,
                           coast = TRUE, coastline = sf::st_union(oxdata$geo$gov_map))
  plot(oxmap)
#+end_src

#+name: fig:plot-oxmap
#+attr_html: :width 500px
#+RESULTS: code:plot-oxmap
[[file:./inst/plot-oxmap.png]]

*** Run Clustering

~hstdbscan~ で位置情報クラスターを作成します。
~geostclust~ 関数ではクラスターの分割数を ~cuts~ 引数で複数指定することができ、今回は ~k = 4, 8, 16, 32~ の分割数に設定しています。

#+begin_src R :async yes 
  clust <- geostclust(geo = sf::st_geometry(oxdata$geo$predict_map),
                      times = as.POSIXct(paste0(gsub("_", "", colnames(oxdata$data)[720:767]), ":00:00")),
                      cuts = c(4, 8, 16, 32),
                      method = "hstdbscan",
                      eps1 = 18.1, eps2 = 3600, minPts = 6,
                      vals = list(list(D = oxdata$data[, 720:767], #ifelse(is.na(oxdata$data[, 720:1463]), -999, oxdata$data[, 720:1463]),
                                       delta_eps = 20)))
#+end_src


#+begin_src none
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Aug 22 11:37:05 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6
	Create Cluster: 7
	Create Cluster: 8
	Create Cluster: 9
	Create Cluster: 10
	Create Cluster: 11
	Create Cluster: 12
	Create Cluster: 13
	Create Cluster: 14
	Create Cluster: 15
	Create Cluster: 16
	Create Cluster: 17
	Create Cluster: 18
	Create Cluster: 19
	Create Cluster: 20
	Create Cluster: 21
	Create Cluster: 22
	Create Cluster: 23
	Create Cluster: 24
	Create Cluster: 25
	Create Cluster: 26
	Create Cluster: 27
	Create Cluster: 28
	Create Cluster: 29
	Create Cluster: 30
	Create Cluster: 31
	Create Cluster: 32
	Create Cluster: 33
	Create Cluster: 34
	Create Cluster: 35
	Create Cluster: 36
	Create Cluster: 37
	Create Cluster: 38
	Create Cluster: 39
	Create Cluster: 40
	Create Cluster: 41
	Create Cluster: 42
	Create Cluster: 43
	Create Cluster: 44
	Create Cluster: 45
	Create Cluster: 46
	Create Cluster: 47
	Create Cluster: 48

Fri Aug 22 11:37:07 2025  Completed.

Completed.
#+end_src


クラスタリングの結果をプロットすると、以下のように色分けされた結果が表示されます。
このクラスタリング結果についての妥当性検証を行います。

#+name: code:plot-geostclust
#+begin_src R :results file graphics :file "./inst/plot-geostclust.png" :width 1500 :height 400 :exports both :res 120
  plot(clust$cluster)
#+end_src

#+name: fig:plot-geostclust
#+attr_html: :width 1000px
#+RESULTS: code:plot-geostclust
[[file:./inst/plot-geostclust.png]]


*** Clustering validation

クラスタリング結果の検証を行います。
以下では、クラスター数を8とした場合の結果を元に検証しています。

~neighbor_method~ では隣接情報の作成方法を指定しています。
関数は ~spdep::poly2nb~, ~spdep::knearneigh~, ~spdep::dnearneigh~ の3つが利用できます。
~spdep::knearneigh~ の場合は隣接数 (~k~) を必ず指定する必用があります。

検証に用いる基準は自ら設定する必用があります。
~checkCond~ 関数を利用し、時系列データの検証及び集塊性の判定基準を upper, middle, lower をそれぞれ設定します。


#+begin_src R :async yes 
  valid <- validstclust(x = oxdata$data[, 720:767],
                        cluster = clust$cluster$hstdbscan_8_cluster,
                        geo = oxmap, ## 隣接点を作成したマップを利用
                        neighbor_method = spdep::poly2nb, ## 隣接情報の作成関数
                        neighbor_option = list() ## 引数値の指定
                        )
#+end_src


#+begin_src none
1. Check cluster agglomeration properties in geospatial areas.
	Create neighbor list
	Run Join-Count
Complete 1.
2. Evaluate the similarity of time series data.
	Check cluster: 1
	fit sparse model: 1
	complete. 
	Check cluster: 2
	fit sparse model: 2
Columns: 129 are entirely missing. Removing these columns.
	complete. 
	Check cluster: 3
	fit sparse model: 3
	complete. 
	Check cluster: 4
	fit sparse model: 4
	complete. 
	Check cluster: 5
	fit sparse model: 5
	complete. 
	Check cluster: 6
	fit sparse model: 6
	complete. 
	Check cluster: 7
	fit sparse model: 7
	complete. 
	Check cluster: 8
	fit sparse model: 8
	complete. 
Complete 2.
3. Evaluate spatial agglomeration.

Finally.
#+end_src


出力結果には、時系列類似性の評価 (~rsq~, ~rmse~)、空間的集塊性の評価 (~Joincount~, ~z_value~, モンテカルロシミュレーションの調整済みR^{2}値 ~adj_p_value~ ) がクラスター毎に計算されています。
各値のチェック方法は ~spdep::joincount.multi~, ~spdep::joincount.mc~ などのヘルプ情報を参考にしてください。


#+begin_src R
  print(valid)
#+end_src

#+begin_src R
Display of time-series similarity and spatial agglomeration
  assessment in clustering results
Check-mode: spatialtemporal

Results: 
  cluster  rsq rmse Joincount   z_value p_value adj_p_value sp_check ts_check
1       1 0.87 6.79 28.261905 12.213382   0.001 0.001142857       **       **
2       2 0.84 7.36  3.791667  1.907261   0.014 0.014000000        *       **
3       3 0.88 5.59  6.260714 12.843759   0.001 0.001142857       **      ***
4       4 0.90 5.50  3.066667 12.361951   0.001 0.001142857       **      ***
5       5 0.94 5.34  7.553571 12.726446   0.001 0.001142857       **      ***
6       6 0.85 5.48  1.166667 10.206818   0.001 0.001142857       **      ***
7       7 0.93 5.08  1.625000 14.380491   0.001 0.001142857       **      ***
8       8 0.82 6.00  2.958333 13.902581   0.001 0.001142857       **      ***
---
Signif. codes: 
  Spatials (sp_check): 
	'***' z_value > 0 & 0.001 >= adj_p_value
	'**'  z_value > 0 & 0.01 >= adj_p_value
	'*'   z_value > 0 & 0.05 >= adj_p_value
	'.'   others.
  Time-Series (ts_check): 
	'***' rsq >= 0.8 & 6 >= rmse
	'**'  rsq >= 0.7 & 10 >= rmse
	'*'   rsq >= 0.6 & 13 >= rmse
	'.'   others.

Geospatial data (sf-class): 

Simple feature collection with 143 features and 3 fields
Geometry type: MULTIPOLYGON
Dimension:     XY
Bounding box:  xmin: 129.4813 ymin: 31.19678 xmax: 132.1002 ymax: 34.02195
Geodetic CRS:  WGS 84
First 10 features:
   cluster sp_check ts_check                       geometry
1        1       **       ** MULTIPOLYGON (((130.9021 33...
2        1       **       ** MULTIPOLYGON (((131.0039 33...
3        2        *       ** MULTIPOLYGON (((130.9424 33...
4        1       **       ** MULTIPOLYGON (((130.8117 33...
5        1       **       ** MULTIPOLYGON (((130.6 33.87...
6        2        *       ** MULTIPOLYGON (((130.7342 33...
7        1       **       ** MULTIPOLYGON (((130.8193 33...
8        1       **       ** MULTIPOLYGON (((130.8497 33...
9        1       **       ** MULTIPOLYGON (((130.8647 33...
10       1       **       ** MULTIPOLYGON (((130.9765 33...
#+end_src

*** Plotting Verification Results
検証結果をコンター図で出力します。

#+name: code:plot-valid
#+begin_src R :results file graphics :file "./inst/plot-valid.png" :width 800 :height 800 :exports both :res 120
  plot(valid)
#+end_src

#+name: fig:plot-valid
#+attr_html: :width 500px
#+RESULTS: code:plot-valid
[[file:./inst/plot-valid.png]]


** Other clustering method

~geostclust~ 関数にはST-DBSCAN以外に ~ward法~, ~k-means法~, ~k-shape法~, ~dtw法~ で計算を行うことができます。

** help
その他使い方に関しては、関数のヘルプを参照してください。

#+begin_src R
  ?stdbscan
#+end_src


* Footnotes

[fn:3] 「国土数値情報（行政区域データ）」（国土交通省）（https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-2025.html）を加工して作成
[fn:2] 国立環境研究所 環境展望台 大気汚染常時監視データファイル: https://tenbou.nies.go.jp/download/, (2025-08-20アクセス).
[fn:1] BIRANT, Derya; KUT, Alp. ST-DBSCAN: An algorithm for clustering spatial–temporal data. Data & knowledge engineering, 2007, 60.1: 208-221. https://www.sciencedirect.com/science/article/pii/S0169023X06000218
