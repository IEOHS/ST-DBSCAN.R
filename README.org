#+property: header-args:R :session *R* :exports both :results code output :eval no-export

* stdbscan package.
ST-DBSCAN (density-based clustering applicable Spatio-Temporal data.) [fn:1]は密度ベースのクラスタリング手法であり、時空間データの解像度はそのままにクラスタリングを行い、ホットスポット検出など時空間データの解析に広く利用されている手法です。

* ST-DBSCANのアルゴリズム

ST-SBSCAN法のアルゴリズム[fn:1]は引用文献から引用し、 ~stdbscan~ 関数を定義しました。
また、このパッケージではグリッドデータにも対応できるよう、アルゴリズムを一部修正しています。
具体的には、クラスター認定されるためには地点 $X$ の隣接点 $Y$ の数が MinPts以上であることが条件 ( $|Y| \geqq MinPts$ ) となっていますが、グリッドデータは常に一定数の隣接点を持つことからこの条件では最適な隣接点を求めることができないと思われます。
そこで、 地点 $X$ と隣接点 $Y$ の値 $D$ の差が $\Delta \epsilon$ 以上となる条件 $Y_\epsilon = (X - Y) \geqq \Delta \epsilon$ の数が MinPts 以上となる条件 ( $|Y_\epsilon| \geqq minPts$ )に変更してクラスター判定を行うよう修正しました。

更に、ST-DBSCAN法の結果に階層的クラスタリングを適用する、階層的ST-DBSCAN (Hierarchical ST-DBSCAN) を実行する ~hstdbscan~ 関数を定義しました。
この ~hstdbscan~ は ~neighbortype = "spatial"~ であるデータに対して、効果的に階層的クラスタリングを実施できます。(~neighbortype = "random"~ では実施しても意味がありません。)

* install package
githubからインストールを実行してください。

#+begin_src R 
  devtools::install_github("IEOHS/ST-DBSCAN.R")
#+end_src


* usage
** ST-DBSCAN
*** for random data

地震の観測位置のように、位置、時間がランダムで位置情報の重複を考慮しないデータである場合、以下のようにして計算を実行します。

#+begin_src R
  library(stdbscan)
  x <- seq(130, 140, by = 1)
  y <- seq(30, 40, by = 1)
  t <- as.POSIXct("2024-01-01 00:00:00", tz = "JST") + 3600 * seq(0, 23, by = 6)
  geo <- sf::st_as_sf(expand.grid(x, y), coords = c("Var1", "Var2"), crs = 4326)

  ## for ramdom
  D <- abs(runif(nrow(geo))) * 100
  clust <- stdbscan(x = cbind(geo, time = rep(t, nrow(geo))[1:nrow(geo)]),
                    eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = D,
                                     delta_eps = 20)),
                    metric = "geo", neighbortype = "random", dbscantype = "default")
  print(clust)
#+end_src

#+RESULTS:
#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 09:51:36 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6

Fri Jun 20 09:51:36 2025  Completed.

Completed.
ST-DBSCAN clustering for 121 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = random, ST-DBSCAN type = random
The clustering contains 6 cluster(s) and 69 noise points.
D (Δeps): 
   Obs_1 (20)
#+end_src

*** for random data
気象観測データ、シミュレーション等の格子モデルの結果など、位置情報が時間で変化しないデータを利用する場合、以下のように実行します。

#+begin_src R
  D <- abs(runif(nrow(geo) * length(t))) * 100
  clust <- stdbscan(x = geo, time = t, eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = D,
                                     delta_eps = 20)),
                    metric = "geo", neighbortype = "spatial", dbscantype = "grid")
  print(clust)
#+end_src

#+RESULTS:
#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 09:57:56 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5

Fri Jun 20 09:57:57 2025  Completed.

Completed.
ST-DBSCAN clustering for 484 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = spatial, ST-DBSCAN type = grid
The clustering contains 5 cluster(s) and 31 noise points.
D (Δeps): 
   Obs_1 (20)
#+end_src

*** plot

~stdbscan~ 関数の結果オブジェクトを ~plot~ すると、クラスターラベルで色分けされた結果を見ることができます。
#+name: code:plot-stdbscan
#+begin_src R :results file graphics :file "./inst/plot-stdbscan.png" :width 800 :height 800 :exports both :res 120
plot(clust)
#+end_src

#+name: fig:plot-stdbscan
#+attr_html: :width 500px
#+RESULTS: code:plot-stdbscan
[[file:./inst/plot-stdbscan.png]]


*** _quakes_ data clustering

Rの *quakes* データセットを使ったST-DBSCANクラスタリングをテストします。
条件として、地震の発生深さ (depth) とマグニチュード (mag) を指定しています。

#+begin_src R
  library(stdbscan)
  quakes_data <- sf::st_as_sf(quakes, coords = c("long", "lat"), crs = 4326)
  clust <- stdbscan(x = sf::st_geometry(quakes_data),
                    time = rep(1, nrow(quakes_data)),
                    eps1 = 100, eps2 = 3600 * 6, minPts = 6,
                    vals = list(list(D = quakes$depth,
                                     delta_eps = 150),
                                list(D = quakes$mag,
                                     delta_eps = 2)),
                    metric = "geo", neighbortype = "random", dbscantype = "default")
  print(clust)
#+end_src

#+RESULTS:
#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Sun Jun 22 05:49:01 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6
	Create Cluster: 7
	Create Cluster: 8
	Create Cluster: 9
	Create Cluster: 10
	Create Cluster: 11
	Create Cluster: 12
	Create Cluster: 13
	Create Cluster: 14
	Create Cluster: 15
	Create Cluster: 16

Sun Jun 22 05:49:02 2025  Completed.

Completed.
ST-DBSCAN clustering for 1000 objects, 1 time length.
Parameters: eps1 = 100, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = random, ST-DBSCAN type = default
The clustering contains 16 cluster(s) and 28 noise points.
D (Δeps): 
   Obs_1 (150), 
   Obs_2 (2)
#+end_src

#+name: code:quakes-plot-stdbscan
#+begin_src R :results file graphics :file "./inst/quakes-plot-stdbscan.png" :width 1500 :height 400 :exports both :res 120
  with(clust$results, {
    merge(geo, value, by = "id") |> plot()
  })
#+end_src

#+name: fig:quakes-plot-stdbscan
#+attr_html: :width 1000px
#+RESULTS: code:quakes-plot-stdbscan
[[file:./inst/quakes-plot-stdbscan.png]]


** Hierarchical ST-DBSCAN

階層的クラスタリングを追加で実行する場合は、 ~hstdbscan~ 関数を利用します。

#+begin_src R
  D <- abs(runif(nrow(geo) * length(t))) * 100
  clust <- hstdbscan(x = geo, time = t, eps1 = 144, eps2 = 3600 * 6, minPts = 6,
                     vals = list(list(D = D,
                                      delta_eps = 20)),
                     metric = "geo", neighbortype = "spatial", dbscantype = "grid")
  print(clust)
#+end_src

#+RESULTS:
#+begin_src R
===== Start ST-DBSCAN method =====

1. Calculation Neighbor List

2. Calculation Cluster

Start Clustering:  Fri Jun 20 10:01:17 2025
	Create Cluster: 1
	Create Cluster: 2
	Create Cluster: 3
	Create Cluster: 4
	Create Cluster: 5
	Create Cluster: 6

Fri Jun 20 10:01:17 2025  Completed.

Completed.
Hierarchical ST-DBSCAN clustering for 484 objects, 4 time length.
Parameters: eps1 = 144, eps2 = 21600, minPts = 6
Using geo distances, neighbor's metric = spatial, ST-DBSCAN type = grid
The clustering contains 6 cluster(s) and 60 noise points.
D (Δeps): 
   Obs_1 (20)


Can use the `cutclust` function to split it into `k` clusters
#+end_src

*** plot

~hstdbscan~ 関数の結果には ~hclust~ によるツリーが含まれており、以下の通り図に出力することができます。

#+name: code:plot-hstdbscan
#+begin_src R :results file graphics :file "./inst/plot-hstdbscan.png" :width 800 :height 800 :exports both :res 120
  plot(clust)
  rect_hstdbscan(clust, k = 4)
#+end_src

#+name: fig:plot-hstdbscan
#+attr_html: :width 500px
#+RESULTS: code:plot-hstdbscan
[[file:./inst/plot-hstdbscan.png]]


*** get clustering data

クラスタリングの結果を =k= 数で分割する場合、 ~cutclust~ 関数を利用して出力します。

#+begin_src R
  cutclust(clust, k = 4)
#+end_src

#+RESULTS:
#+begin_src R
Simple feature collection with 121 features and 2 fields
Geometry type: POINT
Dimension:     XY
Bounding box:  xmin: 130 ymin: 30 xmax: 140 ymax: 40
Geodetic CRS:  WGS 84
First 10 features:
   cluster id       geometry
1        1  1 POINT (130 30)
2        1  2 POINT (131 30)
3        2  3 POINT (132 30)
4        2  4 POINT (133 30)
5        2  5 POINT (134 30)
6        2  6 POINT (135 30)
7        2  7 POINT (136 30)
8        3  8 POINT (137 30)
9        3  9 POINT (138 30)
10       2 10 POINT (139 30)
#+end_src

** help
その他使い方に関しては、関数のヘルプを参照してください。

#+begin_src R
  ?stdbscan
#+end_src


* Footnotes

[fn:3] https://cran.r-project.org/
[fn:2] https://julialang.org/
[fn:1] BIRANT, Derya; KUT, Alp. ST-DBSCAN: An algorithm for clustering spatial–temporal data. Data & knowledge engineering, 2007, 60.1: 208-221. https://www.sciencedirect.com/science/article/pii/S0169023X06000218



